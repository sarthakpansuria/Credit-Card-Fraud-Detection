# -*- coding: utf-8 -*-
"""Credit_Card_Fraud_Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q-Z56RbTOAspcAagoa-YG8bPGRMvLp3g
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

#loading dataset to pandas
credit_card_data = pd.read_csv('/content/creditcard.csv')

#print first 5 rows of dataset
credit_card_data.head()

credit_card_data.tail()

#dataset information
credit_card_data.info()

#checking missing values in each column
credit_card_data.isnull().sum()

# distribution of legit transaction and fradulent one
credit_card_data['Class'].value_counts()

#This dataset is highly unbalanced
# 0 ----> Normal Transaction
# 1 ----> Fraudulent Transaction

# Seperating the data for analysis
legit = credit_card_data[credit_card_data.Class == 0]
fraud = credit_card_data[credit_card_data.Class == 1]

print(legit.shape)
print(fraud.shape)

# statsitical measures of the data
legit.Amount.describe()

fraud.Amount.describe()

# Compare the values for both transaction
credit_card_data.groupby('Class').mean()

"""Under-sampling

Build a sample dataset containing similar distribution of normal transactions and fraudulent transactions

Number of fraud transactions ins 492.
"""

legit_sample = legit.sample(n=492)

"""Concatenating two dataframes: Legit_sample and Fraud"""

new_dataset = pd.concat([legit_sample, fraud], axis=0)

new_dataset.head()

new_dataset.tail()

new_dataset['Class'].value_counts()

new_dataset.groupby('Class').mean()

"""Splitting the data into features and targets(0 0r 1)"""

X = new_dataset.drop(columns='Class', axis=1)
Y = new_dataset['Class']

print(X)

print(Y)

"""Split data into training and testing data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size= 0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Model training

Logistic Regression
"""

model = LogisticRegression(max_iter=1000)

# training the model on training data
model.fit(X_train, Y_train)

"""Model evaluation

Accuracy score
"""

# accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on training data:', training_data_accuracy)

# Accuracy on testing data
X_test_prediction = model.predict(X_test)
testing_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on testing data:', testing_data_accuracy)

